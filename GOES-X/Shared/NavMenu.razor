@using GOES_X.Model;
@using GOES_X.Services
@inject UserPreferencesService UserPrefsService

<div class="@Style navbar">
    <h2>GOES-X</h2>
    @if (Preferences is null)
    {
        <h4>Loading preferences...</h4>
    } 
    else
    {
        <h4>Geographic coverage</h4>
        <select class="sett-select big-select" @bind="@Preferences.GeographicCoverage">
            @foreach (var coverage in Enum.GetValues(typeof(GeographicCoverage)))
            {
                <option value="@coverage">@coverage</option>
            }
        </select>

        <div id="data-timings">
            <h3>Data Timings</h3>
            <div class="separator"></div>
            <Checkbox id="realtime-checkbox" LabelCheckbox="Realtime" Checked="@Preferences.DataTimings.Realtime"></Checkbox>
            <div id="timing-interval">
                <input type="datetime-local" class="date-picker"
                    name="meeting-time" value="2018-06-12T19:30"/>
                <div class="horizontal-separator"></div>
                <input type="datetime-local" class="date-picker"
                    name="meeting-time" value="2018-06-12T19:30"/>
            </div>
        </div>

        <div id="products">
            <h3>Products</h3>
            <div class="separator"></div>
        
            <ul>
                @foreach (var product in Preferences.SelectedProducts)
                {
                    <li><EndUserProduct Value="@product"></EndUserProduct></li>
                }
            </ul>

            <select value="@EupSelectValue" class="sett-button" @onchange="OnProductSelectionChange">
                <option value="+" selected disabled>+</option>
                @for (var i = 0; i < GOES_X.Model.EndUserProduct.Products.Length; i++)
                {
                    <option value="@i">@GOES_X.Model.EndUserProduct.Products[i].Name</option>
                }
            </select>
        </div>

        <div id="animation">
            <h3>Animation Manager</h3>
            <div class="separator"></div>
            <h4>Number of frames</h4>
            <select class="sett-select small-select" id="numframes-select" @bind="@Preferences.Animation.NumberOfFrames">
            </select>
            <h4>Intra-frame time</h4>
            <select class="sett-select small-select" id="iframe-time-select" @bind="@Preferences.Animation.IntraFrameTime">
            </select>
            <button class="sett-button">Save the animation</button>
        </div>
    }
</div>

@code {
    [ParameterAttribute]
    public string Style { get; set; }

    public string EupSelectValue { get; set; } = "+";

    public UserPreferences? Preferences { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        UserPrefsService.OnUserPreferencesUpdate += async () =>
        {
            Preferences = await UserPrefsService.GetPreferencesAsync();
            InvokeAsync(() => StateHasChanged());
        };
        Preferences = await UserPrefsService.GetPreferencesAsync();
    }

    public async void OnProductSelectionChange(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;
        int index = Convert.ToInt32(e.Value);
        GOES_X.Model.EndUserProduct eup = GOES_X.Model.EndUserProduct.Products[index];

        eup.Opacity = 1.0f;
        Preferences = await UserPrefsService.AddEndUserProduct(eup);
        UserPrefsService.TriggerUpdateEvent();
        EupSelectValue = "+";
        InvokeAsync(() => StateHasChanged());
    }

}
