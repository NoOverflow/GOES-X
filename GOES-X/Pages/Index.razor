@page "/"
@using GOES_X.Model
@using GOES_X.Services
@using static GOES_X.Shared.NavMenu
@using HttpRequest = Leaf.xNet.HttpRequest;
@using HttpResponse = Leaf.xNet.HttpResponse;
@inject UserPreferencesService UserPreferencesService
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<div class="topbar">
    <h1>@SatelliteName</h1>
    
    <button @onclick="ToggleMenu" id="menu-button">
        <svg width="30" height="23" viewBox="0 0 30 23" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="30" height="3" fill="#FFF"/>
            <rect y="10" width="30" height="3" fill="#FFF"/>
            <rect y="20" width="30" height="3" fill="#FFF"/>
        </svg>
    </button>
</div>

<NavMenu Style="@MenuStyleCSS" />

<div id="temp-visualizer">
    @if (Preferences is null)
    {
        <h2>Loading preferences...</h2>
    }
    else
    {
        @foreach (var eup in Preferences.SelectedProducts)
        { 
            @if (IsVisualizerImgAvailable(eup))
            {
                <img tabindex="0" @onkeypress="OnImgVisualizerKeyPress" style="transform-origin: center; transform: rotate(@(RotationAngle)deg); opacity: @(eup.Opacity.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture));" src="@(BuildEupUrl(eup))" />
            } 
            else
            {
                <p>@(eup.Name) is unavailable for this timestamp.</p>
            }
        }
    }
</div>

@code {
    // Dynamic CSS
    public bool MenuVisible = false;
    public string MenuStyleCSS => (MenuVisible ? "show" : "collapse");
    public static DateTime EupTimestamp = DateTime.UtcNow.AddHours(-1);
    public string SatelliteName { get; set; } = "GOES 17";

    public int RotationAngle { get; set; } = 0;

    public UserPreferences? Preferences { get; set; } = null;

    private void OnImgVisualizerKeyPress(KeyboardEventArgs e)
    {
        if (e.Key != "r")
            return;
        RotationAngle += 45;
        if (RotationAngle >= 360)
            RotationAngle = 0;
    }

    public bool IsVisualizerImgAvailable(GOES_X.Model.EndUserProduct eup)
    {
        HttpClient client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Options, BuildEupUrl(eup));
        var response = client.Send(request);

        return response.IsSuccessStatusCode;
    }

    private string GetTimestamp()
    {
        if (Preferences.DataTimings.Realtime)
        {
            return DateTime.UtcNow.AddHours(-1).Ticks.ToString();
        } 
        else
        {
            return Preferences.DataTimings.StartTime.Ticks.ToString();    
        }
    }

    private string BuildEupUrl(GOES_X.Model.EndUserProduct eup)
    {
        return NavigationManager.BaseUri + $"api/eup?eupName={eup.EupName}&key={eup.EupIndexName}&timestamp={GetTimestamp()}";
    }

    protected override async Task OnInitializedAsync()
    {
        Preferences = await UserPreferencesService.GetPreferencesAsync();
        JsRuntime.InvokeAsync<object>("CreateViewer", null);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserPreferencesService.OnUserPreferencesUpdate += async () =>
        {
            Preferences = await UserPreferencesService.GetPreferencesAsync();
            InvokeAsync(() => StateHasChanged());
        };
    }

    private void ToggleMenu()
    {
        MenuVisible = !MenuVisible;
    }
}
